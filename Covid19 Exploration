/* Covid 19 Data Exploration
 
 Skill: Joins, CTE's, Temp Tables, Windows Functions, Aggregate Functions, Creating Views, Converting Data Types
 DBMS: Microsoft SQL Server Management Studio 18

*/


select *
from CovidDeaths
order by 3,4


select *
from CovidVaccinations
order by 3,4;

-- select data that we are going to be using

select location, date, population, total_cases, new_cases, total_deaths
from CovidDeaths
order by 1,2;

-- looking at total cases vs total deaths

select location, date, total_cases, total_deaths, (total_deaths/total_cases)*100 as DeathsPercentage
from CovidDeaths
where location = 'Indonesia'
order by 1,2;

-- Looking at total cases vs population

select location, date, total_cases, population, (total_cases/population)*100 as PercentPopulationInfected
from CovidDeaths
where location = 'Indonesia'
order by 1,2;

-- Countries with Highest Infection Rate compared to Population

select location, population, max(total_cases) as HighestInfectionCount, max((total_cases/population)*100) as PercentPopulationInfected
from CovidDeaths
group by location, population
order by 4 desc;

-- Countries with Highest Death Count per Population

select location, max(cast(total_deaths as int)) as TotalDeathCount
from CovidDeaths
where continent is not null 
group by location, population 
order by 2 desc;


-- BREAKING THINGS DOWN BY CONTINENT

-- Showing continents with the highest death count per population

select continent, max(cast(total_deaths as int)) as TotalDeathCount
from CovidDeaths
where continent is not null
group by continent
order by 2 desc;


-- Global Numbers

select sum(new_cases) as total_cases, sum(cast(new_deaths as int)) as total_deaths, sum(cast(new_deaths as int))/sum(new_cases)*100 as DeathPercentage
from CovidDeaths
where continent is not null
order by 1,2;



-- Total Population vs Vaccinations

select d.continent, d.location, d.date, d.population, v.new_vaccinations
, sum(convert(bigint,v.new_vaccinations)) over (partition by d.location 
order by d.location, d.date) as RollingPeopleVaccination 
from CovidDeaths as d
join CovidVaccinations as v
	on d.location = v.location and d.date = v.date
where d.continent is not null
order by 2,3;



-- Using CTE to perform Calculation on Partition by in previous query

with PopvsVac (continent, location, date, population, new_vaccinations, rollingpeoplevaccinated)
as
(
select d.continent, d.location, d.date, d.population, v.new_vaccinations
, sum(convert(bigint,v.new_vaccinations)) over (partition by d.location 
order by d.location, d.date) as RollingPeopleVaccination 
from CovidDeaths as d
join CovidVaccinations as v
	on d.location = v.location and d.date = v.date
where d.continent is not null
--order by 2,3
)
select *, (rollingpeoplevaccinated/population)*100 as PercentPopulationVaccinated
from PopvsVac;

-- Using Temp Table to perform Calculation on Partition by in previous query

drop table if exists PercentPopulationVaccinated;
Create Table PercentPopulationVaccinated
(
Continent nvarchar(255),
Location nvarchar(255),
Date datetime,
Population numeric,
New_Vaccinations numeric,
RollingPeopleVaccinated numeric
);

insert into PercentPopulationVaccinated
select d.continent, d.location, d.date, d.population, v.new_vaccinations
, sum(convert(bigint,v.new_vaccinations)) over (partition by d.location 
order by d.location, d.date) as RollingPeopleVaccination 
from CovidDeaths as d
join CovidVaccinations as v
	on d.location = v.location and d.date = v.date;
--where d.continent is not null
--order by 2,3

select *, (rollingpeoplevaccinated/population)*100 as PercentPopulationVaccinated
from PercentPopulationVaccinated
order by 2,3;


-- Creating view to store data for later visualizations

drop view PercentPopulationVaccinated_view;

create view PercentPopulationVaccinated_view as
select d.continent, d.location, d.date, d.population, v.new_vaccinations
, sum(convert(bigint,v.new_vaccinations)) over (partition by d.location 
order by d.location, d.date) as RollingPeopleVaccination 
from CovidDeaths as d
join CovidVaccinations as v
	on d.location = v.location and d.date = v.date;
--where d.continent is not null
--order by 2,3
